{"ast":null,"code":"var _jsxFileName = \"F:\\\\ReactJS\\\\React-Project\\\\shopee\\\\src\\\\pages\\\\Auth\\\\Register\\\\Register.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useForm, Controller } from 'react-hook-form';\nimport * as S from './register.style';\nimport { Button } from 'src/assets/styles/utilities';\nimport { path } from 'src/constants/path';\nimport InputText from 'src/components/InputText/InputText';\nimport InputPassword from 'src/components/InputPassword/InputPassword';\nimport { rules } from 'src/constants/rules';\nimport ErrorMessage from 'src/components/ErrorMessage/ErrorMessage';\nimport { register } from '../auth.slice';\nimport { useDispatch } from 'react-redux';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Register() {\n  _s();\n\n  const {\n    control,\n    formState: {\n      errors\n    },\n    handleSubmit,\n    getValues,\n    setError\n  } = useForm({\n    defaultValues: {\n      email: '',\n      password: '',\n      confirmedPassword: ''\n    }\n  });\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleRegister = async data => {\n    const body = {\n      email: data.email,\n      password: data.password\n    };\n\n    try {\n      const res = await dispatch(register(body));\n      unwrapResult(res);\n      navigate.push(path.home);\n    } catch (err) {\n      if (err.status === 422) {\n        for (let key in err.data) {\n          setError(key, {\n            type: 'server',\n            message: err.data[key]\n          });\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(S.Container, {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(S.Left, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(S.FormWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(S.FormTitle, {\n        children: \"\\u0111\\u0103ng k\\xFD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(S.Form, {\n        onSubmit: handleSubmit(handleRegister),\n        novalidate: true,\n        children: [/*#__PURE__*/_jsxDEV(S.FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(Controller, {\n            name: \"email\",\n            control: control,\n            rules: rules.email,\n            render: _ref => {\n              let {\n                field\n              } = _ref;\n              return /*#__PURE__*/_jsxDEV(InputText, {\n                type: \"text\",\n                placeholder: \"Email\",\n                name: \"email\",\n                onChange: field.onChange,\n                value: getValues('email')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 17\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), errors.email && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            message: errors.email.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(S.FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(Controller, {\n            name: \"password\",\n            control: control,\n            rules: rules.password,\n            render: _ref2 => {\n              let {\n                field\n              } = _ref2;\n              return /*#__PURE__*/_jsxDEV(InputPassword, {\n                placeholder: \"M\\u1EADt kh\\u1EA9u\",\n                name: \"password\",\n                onChange: field.onChange,\n                value: getValues('password')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 17\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), errors.password && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            message: errors.password.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(S.FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(Controller, {\n            name: \"confirmedPassword\",\n            control: control,\n            rules: { ...rules.confirmedPassword,\n              validate: {\n                samePassword: v => v === getValues('password') || 'Mật khẩu không khớp.'\n              }\n            },\n            render: _ref3 => {\n              let {\n                field\n              } = _ref3;\n              return /*#__PURE__*/_jsxDEV(InputPassword, {\n                placeholder: \"Nh\\u1EADp l\\u1EA1i m\\u1EADt kh\\u1EA9u\",\n                name: \"confirmedPassword\",\n                onChange: field.onChange,\n                value: getValues('confirmedPassword')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 17\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), errors.confirmedPassword && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            message: errors.confirmedPassword.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(S.FormButton, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"\\u0110\\u0103ng k\\xFD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(S.FormFooter, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"B\\u1EA1n \\u0111\\xE3 c\\xF3 t\\xE0i kho\\u1EA3n?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: path.login,\n          className: \"link\",\n          children: \"\\u0110\\u0103ng nh\\u1EADp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Register, \"S3oLfB/HUR2WUuf1pS1RVF63T10=\", false, function () {\n  return [useForm, useDispatch, useNavigate];\n});\n\n_c = Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["F:/ReactJS/React-Project/shopee/src/pages/Auth/Register/Register.jsx"],"names":["React","Link","useNavigate","useForm","Controller","S","Button","path","InputText","InputPassword","rules","ErrorMessage","register","useDispatch","unwrapResult","Register","control","formState","errors","handleSubmit","getValues","setError","defaultValues","email","password","confirmedPassword","dispatch","navigate","handleRegister","data","body","res","push","home","err","status","key","type","message","field","onChange","validate","samePassword","v","login"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport * as S from './register.style'\r\nimport { Button } from 'src/assets/styles/utilities'\r\nimport { path } from 'src/constants/path'\r\nimport InputText from 'src/components/InputText/InputText'\r\nimport InputPassword from 'src/components/InputPassword/InputPassword'\r\nimport { rules } from 'src/constants/rules'\r\nimport ErrorMessage from 'src/components/ErrorMessage/ErrorMessage'\r\nimport { register } from '../auth.slice'\r\nimport { useDispatch } from 'react-redux'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\n\r\nexport default function Register() {\r\n  const {\r\n    control,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    getValues,\r\n    setError\r\n  } = useForm({\r\n    defaultValues: {\r\n      email: '',\r\n      password: '',\r\n      confirmedPassword: ''\r\n    }\r\n  })\r\n\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n\r\n  const handleRegister = async data => {\r\n    const body = {\r\n      email: data.email,\r\n      password: data.password\r\n    }\r\n    try {\r\n      const res = await dispatch(register(body))\r\n      unwrapResult(res)\r\n      navigate.push(path.home)\r\n    } catch (err) {\r\n      if (err.status === 422) {\r\n        for (let key in err.data) {\r\n          setError(key, {\r\n            type: 'server',\r\n            message: err.data[key]\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <S.Container className=\"container\">\r\n      <S.Left />\r\n      <S.FormWrapper>\r\n        <S.FormTitle>đăng ký</S.FormTitle>\r\n        <S.Form onSubmit={handleSubmit(handleRegister)} novalidate>\r\n          <S.FormControl>\r\n            <Controller\r\n              name=\"email\"\r\n              control={control}\r\n              rules={rules.email}\r\n              render={({ field }) => (\r\n                <InputText\r\n                  type=\"text\"\r\n                  placeholder=\"Email\"\r\n                  name=\"email\"\r\n                  onChange={field.onChange}\r\n                  value={getValues('email')}\r\n                />\r\n              )}\r\n            />\r\n            {errors.email && <ErrorMessage message={errors.email.message} />}\r\n          </S.FormControl>\r\n          <S.FormControl>\r\n            <Controller\r\n              name=\"password\"\r\n              control={control}\r\n              rules={rules.password}\r\n              render={({ field }) => (\r\n                <InputPassword\r\n                  placeholder=\"Mật khẩu\"\r\n                  name=\"password\"\r\n                  onChange={field.onChange}\r\n                  value={getValues('password')}\r\n                />\r\n              )}\r\n            />\r\n            {errors.password && (\r\n              <ErrorMessage message={errors.password.message} />\r\n            )}\r\n          </S.FormControl>\r\n          <S.FormControl>\r\n            <Controller\r\n              name=\"confirmedPassword\"\r\n              control={control}\r\n              rules={{\r\n                ...rules.confirmedPassword,\r\n                validate: {\r\n                  samePassword: v =>\r\n                    v === getValues('password') || 'Mật khẩu không khớp.'\r\n                }\r\n              }}\r\n              render={({ field }) => (\r\n                <InputPassword\r\n                  placeholder=\"Nhập lại mật khẩu\"\r\n                  name=\"confirmedPassword\"\r\n                  onChange={field.onChange}\r\n                  value={getValues('confirmedPassword')}\r\n                />\r\n              )}\r\n            />\r\n            {errors.confirmedPassword && (\r\n              <ErrorMessage message={errors.confirmedPassword.message} />\r\n            )}\r\n          </S.FormControl>\r\n          <S.FormButton>\r\n            <Button type=\"submit\">Đăng ký</Button>\r\n          </S.FormButton>\r\n        </S.Form>\r\n        <S.FormFooter>\r\n          <span>Bạn đã có tài khoản?</span>\r\n          <Link to={path.login} className=\"link\">\r\n            Đăng nhập\r\n          </Link>\r\n        </S.FormFooter>\r\n      </S.FormWrapper>\r\n    </S.Container>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}